//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.34014
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
	
namespace Learning
{
		public class StateManager
		{
			List<State> stList = null;
			double[,] adjMatrix;
		
				public StateManager (  )
				{
					stList = new List<State>();
					
				}
				
				public void addState( State s ){
				
					stList.Add( s );

				}
				
				public void makeADJMatrix( ){
					adjMatrix = new double[ stList.Count, stList.Count ];
					
					for( int i = 0; i < stList.Count; i++ ){
						List<int> near = getADJStates( i );
						for( int j = 0; j < near.Count; j++ ){
							adjMatrix[ i, near[j] ] = 1;
							adjMatrix[ near[j], i ] = 1;
						}
					}
				}
				
				private List<int> getADJStates( int stateNumber ){
					List<int> near = new List<int>();
					int x = stList[ stateNumber ].x;
					int y = stList[ stateNumber ].y;
					
					int xm = x-1;
					int xp = x+1;
					int ym = y-1;
					int yp = y+1;
					
										
					int i = 0;
					foreach( State s in stList ){
						if( s.x == xm && s.y == y )
							near.Add( s.num );
						else if( s.x == xp && s.y == y )
							near.Add( s.num );
						else if( s.x == x && s.y == ym )
							near.Add( s.num );
						else if( s.x == x && s.y == yp )
							near.Add( s.num );				
					}
					return near;
				}
		}
}

